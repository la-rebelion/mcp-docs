openapi: 3.0.3
info:
  title: VALORANT Match API
  description: Access VALORANT match data including matchlists, match details, and recent matches.
  version: v1
  contact:
    name: Riot Games
    url: https://developer.riotgames.com/
  license:
    name: Riot Games Developer Terms
    url: https://developer.riotgames.com/policies/terms

servers:
  - url: https://{region}.api.riotgames.com/val/match/v1
    variables:
      region:
        description: The region of the data to retrieve
        enum: [na, eu, ap, kr]
        default: na

x-hapi-allowed-origins: 
  - "http://localhost:8080"
  - "http://localhost:3000"
x-hapi:
  cors:
    enabled: true
    origin: 
      - "http://localhost:8080"
      - "http://localhost:3000"
    headers:
      - "Content-Type"
      - "Authorization"
      - "X-Requested-With"
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
  security:
    - oauth2_authorization_code:
        client_id: "86123456789ABC"
        client_secret: "ABC_DE1.JkABCDEFGHIJ0sDQ.mLMIlw=="
        # @idea - shall we add the redirect_uri here?
        # redirect_path: "/oauth/callback"
    - oauth2_client_credentials:
        # client credentials flow does not require client_id and client_secret, instead uses the client credentials directly

security:
  - oauth2_authorization_code:
      - openid
      - email
      - profile
      - offline_access

paths:
  /matches/{matchId}:
    get:
      summary: Get match by ID
      description: Returns match details for a given match ID.
      operationId: getMatchById
      security:
        - oauth2_authorization_code: [openid, email, profile]
      parameters:
        - name: matchId
          in: path
          required: true
          description: Match ID
          schema:
            type: string
      responses:
        '200':
          description: Match details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /matchlists/by-puuid/{puuid}:
    get:
      summary: Get matchlist for a player
      description: Returns a list of match IDs for a given player PUUID.
      operationId: getMatchlistByPuuid
      security:
        - oauth2_authorization_code: [openid, email, profile]
      parameters:
        - name: puuid
          in: path
          required: true
          description: Player Universal Unique Identifier (PUUID)
          schema:
            type: string
      responses:
        '200':
          description: List of match IDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    type: array
                    items:
                      type: object
                      properties:
                        matchId:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /recent-matches/by-queue/{queue}:
    get:
      summary: Get recent matches by queue
      description: Returns recent match IDs for a given queue.
      operationId: getRecentMatchesByQueue
      security:
        - oauth2_authorization_code: [openid, email, profile]
      parameters:
        - name: queue
          in: path
          required: true
          description: Queue type (e.g., competitive, unrated, spike_rush, etc.)
          schema:
            type: string
      responses:
        '200':
          description: List of recent match IDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  matchIds:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'
  /userinfo:
    get:
      summary: Get user info/profile from Riot Games
      description: Retrieve user information from Riot Games.
      operationId: getUserInfo
      security:
        - oauth2_authorization_code: [openid, email, profile]
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: Subject - Identifier for the user
                  email:
                    type: string
                    description: User's email address
                  email_verified:
                    type: boolean
                    description: Email verification status
                  nickname:
                    type: string
                    description: User's nickname
                  picture:
                    type: string
                    description: URL of the user's profile picture
                  locale:
                    type: string
                    description: User's locale
                  updated_at:
                    type: string
                    format: date-time
                    description: Last update time of the user's information
                  # Add additional properties as needed based on the Riot API docs

components:
  securitySchemes:
    oauth2_authorization_code:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.riotgames.com/authorize
          tokenUrl: https://auth.riotgames.com/token
          refreshUrl: https://auth.riotgames.com/token
          scopes:
            openid: Authenticate using OpenID Connect
            email: Access to user's email address
            profile: Access to basic account information
            offline_access: Get refresh token for long-lived access
        clientCredentials:
          tokenUrl: https://auth.riotgames.com/token
          scopes:
            openid: Authenticate using OpenID Connect
      x-jwks_uri: https://auth.riotgames.com/jwks.json
      x-userinfo_endpoint: https://auth.riotgames.com/userinfo

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      headers:
        WWW-Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RateLimitExceeded:
      description: Rate Limit Exceeded
      headers:
        Retry-After:
          schema:
            type: integer
            description: Number of seconds to wait before making another request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadGateway:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: Service Unavailable
      headers:
        Retry-After:
          schema:
            type: integer
            description: Number of seconds to wait before making another request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    GatewayTimeout:
      description: Gateway Timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        status:
          type: object
          properties:
            message:
              type: string
            status_code:
              type: integer
    MatchDto:
      type: object
      description: Match details object (see Riot API docs for full schema)
      properties:
        matchId:
          type: string
        players:
          type: array
          items:
            type: object
        teams:
          type: array
          items:
            type: object
        rounds:
          type: array
          items:
            type: object
        # Add additional properties as needed based on the Riot API docs