openapi: 3.0.3
info:
  title: VALORANT Ranked API
  description: Get ranked leaderboard and competitive tier information for VALORANT.
  version: v1
  contact:
    name: Riot Games
    url: https://developer.riotgames.com/
  license:
    name: Riot Games Developer Terms
    url: https://developer.riotgames.com/policies/terms

servers:
  - url: https://{region}.api.riotgames.com/val/ranked/v1
    variables:
      region:
        description: The region of the data to retrieve
        enum: [na, eu, ap, kr]
        default: na

security:
  - OAuth2:
      - openid
      - email
      - profile
      - offline_access

paths:
  /leaderboards/by-act/{actId}:
    get:
      summary: Get ranked leaderboard by act
      description: Returns the leaderboard for a given act.
      operationId: getLeaderboardByAct
      security:
        - oauth2_authorization_code: [openid, email, profile]
      parameters:
        - name: actId
          in: path
          required: true
          description: The act ID (e.g., 1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6)
          schema:
            type: string
        - name: size
          in: query
          required: false
          description: Number of leaderboard entries to return (default 200, max 200)
          schema:
            type: integer
            default: 200
            maximum: 200
        - name: startIndex
          in: query
          required: false
          description: Starting index of leaderboard entries (default 0)
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Leaderboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'

  /competitive-tiers:
    get:
      summary: Get competitive tiers
      description: Returns the competitive tier configuration for the current season.
      operationId: getCompetitiveTiers
      security:
        - oauth2_authorization_code: [openid, email, profile]
      responses:
        '200':
          description: Competitive tier data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitiveTiersDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'
  /userinfo:
    get:
      summary: Get user info from Riot Games
      description: Retrieve user information from Riot Games.
      operationId: getUserInfo
      security:
        - oauth2_authorization_code: [openid, email, profile]
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: Subject - Identifier for the user
                  email:
                    type: string
                    description: User's email address
                  email_verified:
                    type: boolean
                    description: Email verification status
                  nickname:
                    type: string
                    description: User's nickname
                  picture:
                    type: string
                    description: URL of the user's profile picture
                  locale:
                    type: string
                    description: User's locale
                  updated_at:
                    type: string
                    format: date-time
                    description: Last update time of the user's information
                  # [additional properties as needed based on the Riot API docs]

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.riotgames.com/authorize
          tokenUrl: https://auth.riotgames.com/token
          scopes:
            openid: Authenticate using OpenID Connect
            email: Access to user's email address
            profile: Access to basic account information
            offline_access: Get refresh token for long-lived access
        clientCredentials:
          tokenUrl: https://auth.riotgames.com/token
          scopes:
            openid: Authenticate using OpenID Connect
      x-jwks_uri: https://auth.riotgames.com/jwks.json
      x-userinfo_endpoint: https://auth.riotgames.com/userinfo

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      headers:
        WWW-Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RateLimitExceeded:
      description: Rate Limit Exceeded
      headers:
        Retry-After:
          schema:
            type: integer
            description: Number of seconds to wait before making another request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadGateway:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: Service Unavailable
      headers:
        Retry-After:
          schema:
            type: integer
            description: Number of seconds to wait before making another request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    GatewayTimeout:
      description: Gateway Timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        status:
          type: object
          properties:
            message:
              type: string
            status_code:
              type: integer
    LeaderboardDto:
      type: object
      description: Leaderboard data (see Riot API docs for full schema)
      properties:
        actId:
          type: string
        players:
          type: array
          items:
            type: object
        totalPlayers:
          type: integer
        immortalStartingPage:
          type: integer
        immortalStartingIndex:
          type: integer
        topTierRRThreshold:
          type: integer
        tierDetails:
          type: array
          items:
            type: object
        startIndex:
          type: integer
        query:
          type: object
    CompetitiveTiersDto:
      type: object
      description: Competitive tiers data (see Riot API docs for full schema)
      properties:
        tiers:
          type: array
          items:
            type: object
        seasonId:
          type: string
        # Add additional properties as needed based on the Riot API docs