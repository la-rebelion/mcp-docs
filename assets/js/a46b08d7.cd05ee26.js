"use strict";(self.webpackChunkmcp_docs=self.webpackChunkmcp_docs||[]).push([[2211],{1289:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"components/chatmcp/chat-flow-design","title":"Chat Flow Design: ChatMCP, OpenAPI, API-first","description":"Learn how to design robust conversational flows using ChatMCP, leveraging OpenAPI schemas and the Model Context Protocol (MCP) for context-driven, API-first AI chat experiences.","source":"@site/docs/3-components/chatmcp/chat-flow-design.md","sourceDirName":"3-components/chatmcp","slug":"/components/chatmcp/chat-flow-design","permalink":"/components/chatmcp/chat-flow-design","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Chat Flow Design","sidebar_class_name":"orange","title":"Chat Flow Design: ChatMCP, OpenAPI, API-first","description":"Learn how to design robust conversational flows using ChatMCP, leveraging OpenAPI schemas and the Model Context Protocol (MCP) for context-driven, API-first AI chat experiences.","keywords":["ChatMCP","chat flow","conversational AI","OpenAPI","API-first","Model Context Protocol","MCP"],"author":"La Rebelion Labs","publisher":"MCP Project","dateModified":"2025-07-27","wip":true},"sidebar":"tutorialSidebar","previous":{"title":"ChatMCP","permalink":"/components/chatmcp/"},"next":{"title":"Memory & Context","permalink":"/components/chatmcp/memory-context"}}');var o=n(4848),i=n(8453);const a={sidebar_position:1,sidebar_label:"Chat Flow Design",sidebar_class_name:"orange",title:"Chat Flow Design: ChatMCP, OpenAPI, API-first",description:"Learn how to design robust conversational flows using ChatMCP, leveraging OpenAPI schemas and the Model Context Protocol (MCP) for context-driven, API-first AI chat experiences.",keywords:["ChatMCP","chat flow","conversational AI","OpenAPI","API-first","Model Context Protocol","MCP"],author:"La Rebelion Labs",publisher:"MCP Project",dateModified:"2025-07-27",wip:!0},r=void 0,c={},l=[{value:"What is a Chat Flow?",id:"what-is-a-chat-flow",level:2},{value:"Core Principles",id:"core-principles",level:2},{value:"How ChatMCP Implements Flows",id:"how-chatmcp-implements-flows",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"what-is-a-chat-flow",children:"What is a Chat Flow?"}),"\n",(0,o.jsx)(t.p,{children:"A chat flow defines the sequence and logic of interactions between a user and one or more agents. In ChatMCP, this is modeled as a series of messages, context updates, and tool invocations\u2014each step informed by the current context and API contract."}),"\n",(0,o.jsxs)(t.admonition,{type:"tip",children:[(0,o.jsx)(t.mdxAdmonitionTitle,{children:(0,o.jsx)(t.strong,{children:"API-first chat flows"})}),(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.em,{children:"API-first chat flows"})," ensure your conversation logic is always in sync with your backend, thanks to API contracts and the Model Context Protocol (MCP). This allows for dynamic, context-aware interactions that can adapt to user needs and system capabilities."]})]}),"\n",(0,o.jsx)(t.h2,{id:"core-principles",children:"Core Principles"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Context-Driven:"})," Every message is processed with full awareness of the current session and context, as defined by MCP."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"API Integration:"})," All agent actions and tool calls are described and validated using API specs (the contract)."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Composable:"})," Flows can include direct chats, group chats, and agent-mediated conversations."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Memory and State:"})," ChatMCP manages persistent and ephemeral memory for each conversation, enabling continuity and personalization."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"how-chatmcp-implements-flows",children:"How ChatMCP Implements Flows"}),"\n",(0,o.jsxs)(t.p,{children:["ChatMCP's architecture (see ",(0,o.jsx)(t.code,{children:"src/pages/Chat.tsx"})," and ",(0,o.jsx)(t.code,{children:"src/contexts/ChatContext.tsx"}),") uses React context to manage chats, messages, and agent interactions. Each chat flow:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Tracks participants and chat type (direct, group, agent)"}),"\n",(0,o.jsx)(t.li,{children:"Manages message history and context state"}),"\n",(0,o.jsx)(t.li,{children:"Handles tool and agent invocations via MCPService"}),"\n",(0,o.jsx)(t.li,{children:"Supports authentication and retries for secure flows"}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Design your flows with OpenAPI first:"})," Define all possible agent actions and tool invocations in your OpenAPI spec."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Use MCP context for personalization:"})," Persist relevant context (e.g., user preferences) to enable smarter flows."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Handle authentication gracefully:"})," Use ChatMCP's built-in auth retry mechanism for secure tool calls."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Test with real agents and users:"})," Simulate realistic flows to catch edge cases early."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://github.com/la-rebelion/chat-mcp",children:"ChatMCP source code"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://swagger.io/specification/",children:"OpenAPI Specification"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://github.com/la-rebelion",children:"Model Context Protocol (MCP)"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(6540);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);