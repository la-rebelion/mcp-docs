"use strict";(self.webpackChunkmcp_docs=self.webpackChunkmcp_docs||[]).push([[3988],{6303:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"components/runmcp/scaling-instances","title":"Scaling Instances: RunMCP, OpenAPI, API-first","description":"Learn how to scale RunMCP gateway instances for high-availability, performance, and seamless OpenAPI/MCP integration.","source":"@site/docs/3-components/runmcp/scaling-instances.md","sourceDirName":"3-components/runmcp","slug":"/components/runmcp/scaling-instances","permalink":"/components/runmcp/scaling-instances","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Scaling Instances","sidebar_class_name":"blue","title":"Scaling Instances: RunMCP, OpenAPI, API-first","description":"Learn how to scale RunMCP gateway instances for high-availability, performance, and seamless OpenAPI/MCP integration.","keywords":["RunMCP","scaling","OpenAPI","API-first","Model Context Protocol","MCP","high-availability","load balancing","autoscaling"],"author":"La Rebelion Labs","publisher":"MCP Project","dateModified":"2025-07-27"},"sidebar":"tutorialSidebar","previous":{"title":"Deployment Models","permalink":"/components/runmcp/deployment-models"},"next":{"title":"Plugin System","permalink":"/components/runmcp/plugin-system"}}');var i=s(4848),t=s(8453);const r={sidebar_position:4,sidebar_label:"Scaling Instances",sidebar_class_name:"blue",title:"Scaling Instances: RunMCP, OpenAPI, API-first",description:"Learn how to scale RunMCP gateway instances for high-availability, performance, and seamless OpenAPI/MCP integration.",keywords:["RunMCP","scaling","OpenAPI","API-first","Model Context Protocol","MCP","high-availability","load balancing","autoscaling"],author:"La Rebelion Labs",publisher:"MCP Project",dateModified:"2025-07-27"},l="Scaling Instances: RunMCP, OpenAPI, API-first",o={},c=[{value:"Scaling Strategies",id:"scaling-strategies",level:2},{value:"Example: Load Balancer Setup",id:"example-load-balancer-setup",level:3},{value:"Example: Kubernetes Horizontal Pod Autoscaler",id:"example-kubernetes-horizontal-pod-autoscaler",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"scaling-instances-runmcp-openapi-api-first",children:"Scaling Instances: RunMCP, OpenAPI, API-first"})}),"\n",(0,i.jsx)(n.p,{children:"Scaling RunMCP is essential for production workloads. Whether you\u2019re serving thousands of users or running mission-critical APIs, follow these patterns for reliability and performance."}),"\n",(0,i.jsx)(n.h2,{id:"scaling-strategies",children:"Scaling Strategies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Horizontal scaling:"})," Add more gateway instances behind a load balancer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stateless design:"})," Keep gateway state external (e.g., config, sessions)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Health checks:"})," Use readiness and liveness probes in orchestrators"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Autoscaling:"})," Use Kubernetes HPA or cloud-native scaling solutions"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Monitor gateway CPU, memory, and response times. Scale out before bottlenecks impact users."})}),"\n",(0,i.jsx)(n.h3,{id:"example-load-balancer-setup",children:"Example: Load Balancer Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"load_balancer:\n  type: round_robin\n  backends:\n    - runmcp-1.internal\n    - runmcp-2.internal\n    - runmcp-3.internal\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-kubernetes-horizontal-pod-autoscaler",children:"Example: Kubernetes Horizontal Pod Autoscaler"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: runmcp-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: runmcp-gateway\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Test scaling and failover in staging environments before going live."})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use stateless gateway design for easy scaling"}),"\n",(0,i.jsx)(n.li,{children:"Automate scaling and failover with orchestrators"}),"\n",(0,i.jsx)(n.li,{children:"Monitor and alert on key metrics"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/la-rebelion/run-mcp",children:"run-mcp source code"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://swagger.io/specification/",children:"OpenAPI Specification"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/la-rebelion",children:"Model Context Protocol (MCP)"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var a=s(6540);const i={},t=a.createContext(i);function r(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);