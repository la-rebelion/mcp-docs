"use strict";(self.webpackChunkmcp_docs=self.webpackChunkmcp_docs||[]).push([[8487],{7358:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"components/hapi-server/grpc-idl/schema-design","title":"Schema Design in HAPI Server: API-first, Protobuf, and MCP","description":"Learn best practices for designing robust, maintainable gRPC schemas in HAPI server using Protocol Buffers and Model Context Protocol (MCP) principles.","source":"@site/docs/3-components/hapi-server/grpc-idl/schema-design.md","sourceDirName":"3-components/hapi-server/grpc-idl","slug":"/components/hapi-server/grpc-idl/schema-design","permalink":"/components/hapi-server/grpc-idl/schema-design","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Schema Design (gRPC)","sidebar_class_name":"green","title":"Schema Design in HAPI Server: API-first, Protobuf, and MCP","description":"Learn best practices for designing robust, maintainable gRPC schemas in HAPI server using Protocol Buffers and Model Context Protocol (MCP) principles.","keywords":["schema design","Protobuf","MCP","HAPI server","API-first","validation","contract"],"author":"La Rebelion Labs","publisher":"MCP Project","dateModified":"2025-07-27"},"sidebar":"tutorialSidebar","previous":{"title":"Protobuf Integration","permalink":"/components/hapi-server/grpc-idl/"},"next":{"title":"Validation Layers (gRPC)","permalink":"/components/hapi-server/grpc-idl/validation-layers"}}');var r=s(4848),o=s(8453);const t={sidebar_position:3,sidebar_label:"Schema Design (gRPC)",sidebar_class_name:"green",title:"Schema Design in HAPI Server: API-first, Protobuf, and MCP",description:"Learn best practices for designing robust, maintainable gRPC schemas in HAPI server using Protocol Buffers and Model Context Protocol (MCP) principles.",keywords:["schema design","Protobuf","MCP","HAPI server","API-first","validation","contract"],author:"La Rebelion Labs",publisher:"MCP Project",dateModified:"2025-07-27"},a="Schema Design: API-first, Protobuf, and MCP",c={},d=[{value:"Principles of Good Protobuf Schema Design",id:"principles-of-good-protobuf-schema-design",level:2},{value:"Example: User Message",id:"example-user-message",level:2},{value:"Using Enums and Constraints",id:"using-enums-and-constraints",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Further Reading",id:"further-reading",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"schema-design-api-first-protobuf-and-mcp",children:"Schema Design: API-first, Protobuf, and MCP"})}),"\n",(0,r.jsx)(n.p,{children:"Schema design is the foundation of any API-first system. In HAPI, your Protocol Buffers (protobuf) schema defines not just RPC methods, but also the structure, validation, and semantics of every request and response."}),"\n",(0,r.jsx)(n.h2,{id:"principles-of-good-protobuf-schema-design",children:"Principles of Good Protobuf Schema Design"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explicitness:"})," Define all fields, types, and constraints clearly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation:"})," Use field options, types, and custom validation logic."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reusability:"})," Use message definitions and imports to avoid duplication."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extensibility:"})," Leverage protobuf extensions for MCP-specific needs."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Design your protobuf schemas with future agents and tools in mind. Well-structured schemas make it easier for MCP-powered agents to reason about and use your API."})}),"\n",(0,r.jsx)(n.h2,{id:"example-user-message",children:"Example: User Message"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-proto",children:"message User {\n  string id = 1;\n  string name = 2;\n  string email = 3;\n  repeated string roles = 4;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"using-enums-and-constraints",children:"Using Enums and Constraints"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-proto",children:"enum Status {\n  ACTIVE = 0;\n  INACTIVE = 1;\n  PENDING = 2;\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["Avoid using generic types like ",(0,r.jsx)(n.code,{children:"google.protobuf.Any"})," unless necessary. This can make validation and documentation less effective."]})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use message definitions to share common models across RPCs."}),"\n",(0,r.jsx)(n.li,{children:"Document all fields, even optional ones, using comments."}),"\n",(0,r.jsx)(n.li,{children:"Use field options for validation and constraints."}),"\n",(0,r.jsxs)(n.li,{children:["Validate with tools like ",(0,r.jsx)(n.code,{children:"protoc"})," and gRPC code generators."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://protobuf.dev/programming-guides/proto3/",children:"Protocol Buffers Language Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/la-rebelion/hapi-mcp",children:"HAPI MCP source code"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/la-rebelion",children:"Model Context Protocol (MCP)"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);