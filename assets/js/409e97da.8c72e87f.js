"use strict";(self.webpackChunkmcp_docs=self.webpackChunkmcp_docs||[]).push([[32],{5866:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"components/runmcp/gateway-config","title":"Gateway Configuration in RunMCP: API-first, OpenAPI, and MCP","description":"Learn how to configure the RunMCP gateway for API-first, OpenAPI-driven deployments, including dynamic routing, service registration, and best practices.","source":"@site/docs/3-components/runmcp/gateway-config.md","sourceDirName":"3-components/runmcp","slug":"/components/runmcp/gateway-config","permalink":"/components/runmcp/gateway-config","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Gateway Config","sidebar_class_name":"orange","title":"Gateway Configuration in RunMCP: API-first, OpenAPI, and MCP","description":"Learn how to configure the RunMCP gateway for API-first, OpenAPI-driven deployments, including dynamic routing, service registration, and best practices.","keywords":["RunMCP","gateway config","OpenAPI","API-first","Model Context Protocol","MCP","dynamic routing","service registration"],"author":"La Rebelion Labs","publisher":"MCP Project","dateModified":"2025-07-27"},"sidebar":"tutorialSidebar","previous":{"title":"RunMCP","permalink":"/components/runmcp/"},"next":{"title":"Deployment Models","permalink":"/components/runmcp/deployment-models"}}');var r=i(4848),a=i(8453);const o={sidebar_position:2,sidebar_label:"Gateway Config",sidebar_class_name:"orange",title:"Gateway Configuration in RunMCP: API-first, OpenAPI, and MCP",description:"Learn how to configure the RunMCP gateway for API-first, OpenAPI-driven deployments, including dynamic routing, service registration, and best practices.",keywords:["RunMCP","gateway config","OpenAPI","API-first","Model Context Protocol","MCP","dynamic routing","service registration"],author:"La Rebelion Labs",publisher:"MCP Project",dateModified:"2025-07-27"},s="Gateway Configuration: RunMCP, OpenAPI, API-first",c={},l=[{value:"Key Configuration Patterns",id:"key-configuration-patterns",level:2},{value:"Example: Service Registration (YAML)",id:"example-service-registration-yaml",level:3},{value:"Example: Dynamic Routing Rule",id:"example-dynamic-routing-rule",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"gateway-configuration-runmcp-openapi-api-first",children:"Gateway Configuration: RunMCP, OpenAPI, API-first"})}),"\n",(0,r.jsx)(n.p,{children:"Configuring the RunMCP gateway is all about mapping OpenAPI-powered services to routes, subdomains, and plugins. The gateway reads your configuration and dynamically provisions endpoints and routing logic."}),"\n",(0,r.jsx)(n.h2,{id:"key-configuration-patterns",children:"Key Configuration Patterns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service registration:"})," Define each service with its OpenAPI spec, base URL, and routing rules."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic subdomains:"})," Route requests to the correct backend based on subdomain or path."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plugin hooks:"})," Attach plugins for authentication, logging, or custom logic."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"You can update gateway config via file or API\u2014no need to restart the gateway for every change!"})}),"\n",(0,r.jsx)(n.h3,{id:"example-service-registration-yaml",children:"Example: Service Registration (YAML)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"services:\n  - name: chatmcp\n    openapi: ./chatmcp-openapi.json\n    url: https://chatmcp.run.mcp.com.ai\n    subdomain: chatmcp\n  - name: hapi\n    openapi: ./hapi-openapi.json\n    url: https://hapi.run.mcp.com.ai\n    subdomain: hapi\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example-dynamic-routing-rule",children:"Example: Dynamic Routing Rule"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'routes:\n  - match:\n      subdomain: "*.run.mcp.com.ai"\n    forwardTo: service\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:"Always validate your configuration before applying. Invalid routes or missing OpenAPI specs can cause downtime."})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use descriptive service names and keep OpenAPI specs up to date"}),"\n",(0,r.jsx)(n.li,{children:"Leverage plugins for security, monitoring, and custom needs"}),"\n",(0,r.jsx)(n.li,{children:"Test routing and failover in staging before production"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/la-rebelion/run-mcp",children:"run-mcp source code"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://swagger.io/specification/",children:"OpenAPI Specification"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/la-rebelion",children:"Model Context Protocol (MCP)"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var t=i(6540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);