"use strict";(self.webpackChunkmcp_docs=self.webpackChunkmcp_docs||[]).push([[2082],{6371:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"components/runmcp/deployment-models","title":"Deployment Models: RunMCP, OpenAPI, API-first","description":"Explore different deployment models for RunMCP in the MCP stack, including single-node, multi-node, and cloud-native strategies.","source":"@site/docs/3-components/runmcp/deployment-models.md","sourceDirName":"3-components/runmcp","slug":"/components/runmcp/deployment-models","permalink":"/components/runmcp/deployment-models","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Deployment Models","sidebar_class_name":"green","title":"Deployment Models: RunMCP, OpenAPI, API-first","description":"Explore different deployment models for RunMCP in the MCP stack, including single-node, multi-node, and cloud-native strategies.","keywords":["RunMCP","deployment models","OpenAPI","API-first","Model Context Protocol","MCP","scaling","multi-tenancy","cloud-native"],"author":"La Rebelion Labs","publisher":"MCP Project","dateModified":"2025-07-27"},"sidebar":"tutorialSidebar","previous":{"title":"Gateway Config","permalink":"/components/runmcp/gateway-config"},"next":{"title":"Scaling Instances","permalink":"/components/runmcp/scaling-instances"}}');var i=o(4848),s=o(8453);const l={sidebar_position:3,sidebar_label:"Deployment Models",sidebar_class_name:"green",title:"Deployment Models: RunMCP, OpenAPI, API-first",description:"Explore different deployment models for RunMCP in the MCP stack, including single-node, multi-node, and cloud-native strategies.",keywords:["RunMCP","deployment models","OpenAPI","API-first","Model Context Protocol","MCP","scaling","multi-tenancy","cloud-native"],author:"La Rebelion Labs",publisher:"MCP Project",dateModified:"2025-07-27"},r="Deployment Models: RunMCP, OpenAPI, API-first",a={},d=[{value:"Common Deployment Models",id:"common-deployment-models",level:2},{value:"Example: Docker Compose (Dev)",id:"example-docker-compose-dev",level:3},{value:"Example: Kubernetes Deployment",id:"example-kubernetes-deployment",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Further Reading",id:"further-reading",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"deployment-models-runmcp-openapi-api-first",children:"Deployment Models: RunMCP, OpenAPI, API-first"})}),"\n",(0,i.jsx)(n.p,{children:"RunMCP supports a range of deployment models, from simple single-node gateways to highly available, multi-node, cloud-native clusters."}),"\n",(0,i.jsx)(n.h2,{id:"common-deployment-models",children:"Common Deployment Models"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single-node:"})," All traffic routed through one gateway instance (good for dev/test)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-node:"})," Multiple gateways behind a load balancer for high-availability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cloud-native:"})," Kubernetes or container-based deployments with dynamic scaling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hybrid:"})," Mix on-prem and cloud, or combine with other API gateways"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"For production, use at least two gateway instances behind a load balancer for redundancy and zero-downtime upgrades."})}),"\n",(0,i.jsx)(n.h3,{id:"example-docker-compose-dev",children:"Example: Docker Compose (Dev)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"version: '3.8'\nservices:\n  runmcp:\n    image: larebelion/runmcp:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/app/config\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-kubernetes-deployment",children:"Example: Kubernetes Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: runmcp-gateway\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: runmcp-gateway\n  template:\n    metadata:\n      labels:\n        app: runmcp-gateway\n    spec:\n      containers:\n        - name: runmcp\n          image: larebelion/runmcp:latest\n          ports:\n            - containerPort: 8080\n          volumeMounts:\n            - name: config\n              mountPath: /app/config\n      volumes:\n        - name: config\n          configMap:\n            name: runmcp-config\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Use persistent storage for configuration and logs in production deployments."})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use environment variables for secrets and config"}),"\n",(0,i.jsx)(n.li,{children:"Monitor gateway health and scale horizontally as needed"}),"\n",(0,i.jsx)(n.li,{children:"Automate deployments with CI/CD pipelines"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/la-rebelion/run-mcp",children:"run-mcp source code"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://swagger.io/specification/",children:"OpenAPI Specification"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/la-rebelion",children:"Model Context Protocol (MCP)"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var t=o(6540);const i={},s=t.createContext(i);function l(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);